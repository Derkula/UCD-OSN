Bootstrap: docker
From: ubuntu:18.04

%labels
    Author ben.loer@pnnl.gov, stefan.zatschler@utoronto.ca
    RecipeVersion V06_20240925

%help
    CDMS Analysis base/development image with ROOT installed at /usr/local

## %setup
## find cdmsbats to copy into image
   ## SOURCEDIR=`find **/root5_Singularity.def | awk -F root5_Singularity.def '{print $1}'` 
   # I think the problem is that this is not working. just going to supply manually. sorry

%files
## copy cdmsbats into image
     cdmsbats_old/cdmsbats_singularity /cdmsbats_singularity 
    
    .aws /.aws

%environment
    export ROOTSYS=/usr/local

    export CDMSBATSDIR=/cdmsbats_singularity
    export AWS_CONFIG_FILE=/.aws/config
    export AWS_SHARED_CREDENTIALS_FILE=/.aws/credentials


    #export BATNOISE_TEMPLATES=$CDMSBATSDIR/PulseTemplates
    
    #export BATROOT_PROC=$HOME/cdmsbats_config/UserSettings/BatRootSettings/processing
    #export BATROOT_CONST=$HOME/cdmsbats_config/UserSettings/BatRootSettings/analysis

    #export BATROOT_RAWDATA=$HOME/cdmsbats_work/raw
    #export BATROOT_NOISEFILES=$HOME/cdmsbats_work/noise
    #export BATROOT_RQDATA=$HOME/cdmsbats_work/rq
    #export BATCALIB_RQDATA=$BATROOT_RQDATA
    #export BATCALIB_RRQDATA=$HOME/cdmsbats_work/rrq
    #export BATROOT_AUXFILES=$HOME/cdmsbats_work/aux
    #export BATROOT_GPIBFILES=$HOME/cdmsbats_work/gpib
    
    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH:$CDMSBATSDIR/BatCommon/BUILD/lib
    export PATH=$PATH:$CDMSBATSDIR/BUILD/bin

%post
    ls -lh $HOME
    ls -lh /

    export DEBIAN_FRONTEND=noninteractive
    export TZ=Etc/UTC

    ## nix package manager
#    mkdir /nix
#    echo "sandbox = false\
#use-sqlite-wal = false" > ~/.config/nix/nix.conf
#    sh <(curl -L https://nixos.org/nix/install)

    ## aws install
    apt-get update -y
    apt-get install awscli -y   

    ## required packages for ROOT
    apt install -y software-properties-common wget gawk bison gettext texinfo
    add-apt-repository ppa:ubuntu-toolchain-r/test
    apt-get update && \
    apt-get install -y build-essential cmake git ssh wget curl rsync vim \
            dpkg-dev libc6 g++-9 gcc-9 binutils libx11-dev libxpm-dev \
            libxft-dev libxext-dev libssl1.0-dev \
            python3-dev python3-pip python3-venv \
            libopenblas-dev libboost-dev libboost-python-dev libboost-numpy-dev \
            gfortran-4.8 libglu1-mesa-dev libsqlite3-dev \
            libfftw3-dev libcfitsio-dev libgraphviz-dev \
            libavahi-compat-libdnssd-dev libldap2-dev libxml2-dev \
            libpcre3-dev libftgl-dev libglew-dev \
	    python-numpy \
            libgsl-dev libxi-dev doxygen && \
    apt-get clean

    ## glibc, need timesize.h
    wget -c https://ftp.gnu.org/gnu/glibc/glibc-2.39.tar.gz
    tar -zxvf glibc-2.39.tar.gz
    mkdir glibc-2.39/build
    cd glibc-2.39/build
    export LD_LIBRARY_PATH=/usr/local/lib:/.singularity.d/libs
    echo $LD_LIBRARY_PATH
    ../configure --prefix=/opt/glibc
    make 
    make install

    ## required python packages
    python3 -m pip install --upgrade pip setuptools wheel
    python3 -m pip install --upgrade numpy scipy pandas ipython jupyterlab \
                          metakernel memory-profiler uproot h5py \
                          tables iminuit>=2.0 pydot pint pdoc3 pyfftw \
                          pdoc3 scipy>=1.2 astropy pandoc cython numba \
                          sphinx sphinx-rtd-theme

    ## update Git to recommended LTS version (support safe.directory wildcards)
    GITVERSION=2.36.6
    apt-get update && \
    apt-get install -y dh-autoreconf install-info libcurl4-gnutls-dev \
            libexpat1-dev gettext libz-dev libssl-dev && \
    apt-get clean

    mkdir /buildgit
    cd /buildgit
    curl https://mirrors.edge.kernel.org/pub/software/scm/git/git-${GITVERSION}.tar.gz | tar -xz

    cd git-${GITVERSION}
    make configure
    ./configure --prefix=/usr/local
    make all && make install

    ldconfig
    cd /
    rm -rf /buildgit

## ROOT install
    ROOTVERSION=5.34.38
    mkdir /buildroot
    cd /buildroot

    ## build ROOT from scratch (default option)
    curl https://root.cern/download/root_v${ROOTVERSION}.source.tar.gz | tar -xz
    mv root root-$ROOTVERSION
    mkdir -p /usr/include/x86_64_linux_gnu/
    cd root-$ROOTVERSION
    ls
    ./configure --enable-fftw3
    cd ../
    cmake -Dfftw3=ON root-${ROOTVERSION} -DCMAKE_INSTALL_PREFIX=/usr/local \
          -Dfortran=ON \
          -Dminuit2=ON \
          -Dmysql=ON \
          -Dsoversion=ON \
          -Dsqlite=ON \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo
    make -j6 && make install

    ## use ROOT binary distribution (for testing)
    #curl https://root.cern/download/root_v${ROOTVERSION}.Linux-ubuntu14-x86_64-gcc4.8.tar.gz | tar -xz
    #rm -rf root/man
    #cp -RT root/ /usr/local/

    ## make ROOT libraries appear in python path
	ls  /usr/include/c++
    echo "/usr/local/lib" > /usr/local/lib/python3.6/dist-packages/ROOT.pth
	# python*/dist-packages : save to whatever python version is present -- if there are multiple this will fail.
    export ROOTSYS=/usr/local

    ldconfig
    cd /
    rm -rf /buildroot

    ## Set up links as will be needed by CMDSBats
    ls /usr/include/x86_64_linux_gnu/
    # ln -s /glibc-2.39/bits/timesize.h /usr/include/x86_64_linux_gnu/bits/timesize.h

    ## cdmsbats install
    #export CDMSBATSDIR= /cdmsbats_singularity
    cd cdmsbats_singularity
    make all

    #export CDMSBATSDIR = /cdmsbats_singularity

